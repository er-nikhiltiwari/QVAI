!pip install PyPDF2 python-docx python-pptx pytesseract Pillow gradio google-generativeai

!pip install google-generativeai gradio PyPDF2 python-docx python-pptx pytesseract Pillow

import google.generativeai as genai
import os
from PyPDF2 import PdfReader
import io

try:
    from docx import Document
except ImportError:
    print("Warning: 'python-docx' not found. DOCX file support will be unavailable.")
    Document = None

try:
    from pptx import Presentation
except ImportError:
    print("Warning: 'python-pptx' not found. PPTX file support will be unavailable.")
    Presentation = None

try:
    import pytesseract
    from PIL import Image
except ImportError:
    print("Warning: 'pytesseract' or 'Pillow' not found. Image (OCR) support will be unavailable.")
    print("Ensure Tesseract OCR engine is also installed on your system for image processing.")
    pytesseract = None
    Image = None

API_KEY = "AIzaSyDDMRRX.....ZnppvQ"

if API_KEY == "YOUR_GEMINI_API_KEY" or not API_KEY:
    raise ValueError("Please replace 'YOUR_GEMINI_API_KEY' with your actual API key in the script or set it as an environment variable.")

genai.configure(api_key=API_KEY)

model = genai.GenerativeModel(
    'gemini-2.0-flash',
    system_instruction="Your responses should be concise, short, direct and between 120 and 200 words maximum. Do not exceed this word limit for generating responses. and You should only response to only the Educational related questions, answers, explanations and FAQs realted queries. Answer generated by you must be always educational. Act you are a personal assistant to the user on queries."
)

def extract_text_from_pdf(pdf_file_content):
    """Extracts text from a PDF file object."""
    try:
        reader = PdfReader(io.BytesIO(pdf_file_content))
        text = ""
        for page_num in range(len(reader.pages)):
            text += reader.pages[page_num].extract_text() or ""
        return text
    except Exception as e:
        return f"Error processing PDF: {e}"

def extract_text_from_txt(txt_file_content):
    """Extracts text from a TXT file content."""
    try:
        return txt_file_content.decode('utf-8')
    except Exception as e:
        return f"Error processing TXT: {e}"

def extract_text_from_docx(docx_file_path):
    """Extracts text from a DOCX file."""
    if Document is None:
        return "Error: 'python-docx' library not installed. Cannot process DOCX files."
    try:
        doc = Document(docx_file_path)
        full_text = []
        for para in doc.paragraphs:
            full_text.append(para.text)
        return '\n'.join(full_text)
    except Exception as e:
        return f"Error processing DOCX: {e}"

def extract_text_from_pptx(pptx_file_path):
    """Extracts text from a PPTX file."""
    if Presentation is None:
        return "Error: 'python-pptx' library not installed. Cannot process PPTX files."
    try:
        prs = Presentation(pptx_file_path)
        full_text = []
        for slide in prs.slides:
            for shape in slide.shapes:
                if hasattr(shape, "text"):
                    full_text.append(shape.text)
        return '\n'.join(full_text)
    except Exception as e:
        return f"Error processing PPTX: {e}"

def extract_text_from_image(image_file_path):
    """Extracts text from an image file using OCR."""
    if pytesseract is None or Image is None:
        return "Error: 'pytesseract' or 'Pillow' not installed, or Tesseract OCR engine missing. Cannot process image files."
    try:
        img = Image.open(image_file_path)
        text = pytesseract.image_to_string(img)
        return text
    except Exception as e:
        return f"Error processing image (OCR): {e}. Make sure Tesseract is installed and configured."

def get_document_context(file_path):
    """Reads the content of a document, supporting multiple types."""
    extension = os.path.splitext(file_path)[1].lower()

    if extension == '.pdf':
        with open(file_path, "rb") as f:
            return extract_text_from_pdf(f.read())
    elif extension == '.txt':
        with open(file_path, "rb") as f:
            return extract_text_from_txt(f.read())
    elif extension == '.docx':
        return extract_text_from_docx(file_path)
    elif extension == '.pptx':
        return extract_text_from_pptx(file_path)
    elif extension in ['.jpg', '.jpeg', '.png', '.img']:
        return extract_text_from_image(file_path)
    else:
        return "Unsupported document type. Please upload a .txt, .docx, .pptx, .pdf, or an image file (.jpg, .png, .img)."

chat_history = []
document_context = ""

def generate_response(user_message, history):
    """Generates a response using the Gemini model, incorporating document context."""
    global document_context
    global chat_history

    full_query = user_message
    if document_context:
        full_query = f"Based on the following document content:\n\n{document_context}\n\nAnd the user's query: {user_message}"

    try:
        prompt_with_history = ""
        for human, ai in history:
            prompt_with_history += f"Human: {human}\nAI: {ai}\n"
        prompt_with_history += f"Human: {full_query}\nAI:"

        response = model.generate_content(prompt_with_history)
        bot_response = response.text

        chat_history.append((user_message, bot_response))
        return bot_response

    except Exception as e:
        return f"An error occurred: {e}. Please try again or rephrase your query."

def upload_document_cli():
    """Handles document upload via command line and sets the global document context."""
    global document_context
    file_path = input("Enter the path to your document (e.g., /path/to/document.pdf), or type 'clear' to clear context: ").strip()

    if file_path.lower() == 'clear':
        document_context = ""
        print("Document context cleared.")
        return

    if not file_path:
        document_context = ""
        print("No document path entered. Chatbot will respond without document context.")
        return

    try:
        content = get_document_context(file_path)
        if content.startswith("Error") or content.startswith("Unsupported"):
            document_context = ""
            print(content)
        else:
            document_context = content
            print("Document uploaded and processed successfully! You can now ask questions related to its content.")
    except Exception as e:
        document_context = ""
        print(f"Failed to process document: {e}")

def main_cli():
    """Main function for the command-line interface."""
    print("Welcome to QuizzyBot - Your smart assistant for study queries!")
    print("Type 'upload' to process a document, 'clear' to clear chat history, or 'exit' to quit.")

    while True:
        user_input = input("\nYou: ").strip()

        if user_input.lower() == 'exit':
            print("Goodbye!")
            break
        elif user_input.lower() == 'upload':
            upload_document_cli()
        elif user_input.lower() == 'clear':
            global chat_history
            global document_context
            chat_history = []
            document_context = ""
            print("Chat history and document context cleared.")
        else:
            response = generate_response(user_input, chat_history)
            print(f"QuizzyBot: {response}")

if __name__ == "__main__":
    main_cli()